unit WZIMGFile;

interface

uses Windows, Classes, SysUtils, Variants, Generics.Collections, Tools, Dialogs,
     WZReader, WZDirectory, PNGMapleCanvas, MP3MapleSound, VirtualTrees;

type
  TMapleDataType = (mdtNone, mdtIMG_0x00, mdtShort, mdtInt, mdtFloat, mdtDouble,
                    mdtString, mdtExtended, mdtProperty, mdtCanvas, mdtVector,
                    mdtConvex, mdtSound, mdtUOL);

  TWZIMGEntry = class(TWZEntry)
  private
    FType: TMapleDataType;
    FData: Variant;
    FCanvas: TPNGMapleCanvas;
    FVector: TPoint;
    FSound: TMP3MapleSound;
    FNode: PVirtualNode;

    FChildren: TList<TWZIMGEntry>;

    function GetChild(Name: string): TWZIMGEntry;
  public
    constructor Create(Parent: TWZEntry);
    destructor Destroy; override;

    procedure AddChild(Entry: TWZIMGEntry);
    procedure Finish;

    function Get(const Path: string): TWZIMGEntry; overload;
    function Get(const Path: string; Default: Variant): Variant; overload;

    procedure Paint(VST: TVirtualStringTree);

    property DataType: TMapleDataType read FType write FType;
    property Data: Variant read FData write FData;
    property Canvas: TPNGMapleCanvas read FCanvas write FCanvas;
    property Vector: TPoint read FVector write FVector;
    property Sound: TMP3MapleSound read FSound write FSound;
    property Child[Name: string]: TWZIMGEntry read GetChild;
    property Children: TList<TWZIMGEntry> read FChildren;  // read-only
    property Node: PVirtualNode read FNode write FNode;
  end;

  TWZIMGFile = class
  private
    WZ: TWZReader;
    FFileEntry: TWZFile;
    FRoot: TWZIMGEntry;

    procedure Parse(var Entry: TWZIMGEntry);
    procedure ParseExtended(var Entry: TWZIMGEntry; EndOfExtendedBlock: Cardinal);
  public
    constructor Create(WZReader: TWZReader; WZFileEntry: TWZFile);
    destructor Destroy; override;

    procedure Paint(VST: TVirtualStringTree);

    property Root: TWZIMGEntry read FRoot write FRoot;
  end;

implementation

{ TWZIMGEntry }

constructor TWZIMGEntry.Create(Parent: TWZEntry);
begin
  Self.Parent := Parent;
  FChildren := TList<TWZIMGEntry>.Create;
end;

destructor TWZIMGEntry.Destroy;
var
  i: Integer;
begin
  for i := 0 to FChildren.Count - 1 do
    FChildren[i].Free;

  FChildren.Free;

  if FSound <> nil then
    FSound.Free;

  if FCanvas <> nil then
    FCanvas.Free;

  FData := Null;

  inherited;
end;

procedure TWZIMGEntry.AddChild(Entry: TWZIMGEntry);
begin
  FChildren.Add(Entry);
end;

procedure TWZIMGEntry.Finish;
begin
  FChildren.TrimExcess;
end;

function TWZIMGEntry.Get(const Path: string): TWZIMGEntry;
var
  Split: TStringArray;
  i: Integer;
begin
  Split := Explode('/', Path);

  Result := Self;
  for i := 0 to High(Split) do
  begin
    if Split[i] = '..' then
      Result := TWZIMGEntry(Result.Parent)
    else
      Result := Result.Child[Split[i]];

    if not Assigned(Result) then
      Exit;
  end;

  Split := nil;
end;

function TWZIMGEntry.Get(const Path: string; Default: Variant): Variant;
var
  i: Integer;
  E: TWZIMGEntry;
begin
  E := Get(Path);
  if E = nil then
    Exit(Default);

  if (VarType(Default) in [varSmallInt..varUInt64]) and (not (VarType(E.Data) in [varSmallInt..varUInt64])) then
  begin
    if VarType(E.Data) = varUString then
      if TryStrToInt(E.Data, i) then
        Exit(i)
      else
        Exit(Default)
    else
      ShowMessage(VarTypeAsText(VarType(E.Data)) + '  --->  ' + IntToStr(Byte(E.DataType)) + '  ||  ' + VarTypeAsText(VarType(Default))) ;

    Exit(Default);
  end;

  Result := E.Data;
end;

function TWZIMGEntry.GetChild(Name: string): TWZIMGEntry;
begin
  for Result in FChildren do
    if SameText(Result.Name, Name) then
      Exit;

  Result := nil;
end;

procedure TWZIMGEntry.Paint(VST: TVirtualStringTree);
var
  Child: TWZIMGEntry;
begin
  VST.BeginUpdate;

  try
    for Child in FChildren do
    begin
      Child.Node := VST.AddChild(Self.Node, Child);
      Child.Paint(VST);
    end;
  finally
    VST.EndUpdate;
  end;
end;

{ TWZIMGFile }

constructor TWZIMGFile.Create(WZReader: TWZReader; WZFileEntry: TWZFile);
begin
  WZ := WZReader;
  FFileEntry := WZFileEntry;

  WZ.Seek(FFileEntry.Offset, soBeginning);

  FRoot := TWZIMGEntry.Create(FFileEntry.Parent);
  FRoot.Name := FFileEntry.Name;
  FRoot.DataType := mdtExtended;

  ParseExtended(FRoot, 0);
end;

destructor TWZIMGFile.Destroy;
begin
  FFileEntry.IMGFile := nil;
  FRoot.Free;

  inherited;
end;

procedure TWZIMGFile.Paint(VST: TVirtualStringTree);
var
  Child: TWZIMGEntry;
begin
  VST.BeginUpdate;

  try
    for Child in Root.Children do
    begin
      Child.Node := VST.AddChild(FFileEntry.Node, Child);
      Child.Paint(VST);
    end;
  finally
    VST.EndUpdate;
  end;
end;

procedure TWZIMGFile.Parse(var Entry: TWZIMGEntry);
var
  Marker, iMarker: Byte;
  EndOfExtBlock: Cardinal;
begin
  Marker := WZ.ReadByte;

  case Marker of
    0: Entry.Name := WZ.ReadDecodedString;
    1: Entry.Name := WZ.ReadDecodedStringAtOffsetAndReset(FFileEntry.Offset + WZ.ReadInt);
  end;

  Marker := WZ.ReadByte;

  case Marker of
    0: Entry.DataType := mdtIMG_0x00;
2, 11: begin
         Entry.DataType := mdtShort;
         Entry.Data := WZ.ReadShort;
       end;
    3: begin
         Entry.DataType := mdtInt;
         Entry.Data := WZ.ReadValue;
       end;
    4: begin
         Entry.DataType := mdtFloat;
         Entry.Data := WZ.ReadFloatValue;
       end;
    5: begin
         Entry.DataType := mdtDouble;
         Entry.Data := WZ.ReadDouble;
       end;
    8: begin
         Entry.DataType := mdtString;
         iMarker := WZ.ReadByte;
         case iMarker of
           0: Entry.Data := WZ.ReadDecodedString;
           1: Entry.Data := WZ.ReadDecodedStringAtOffsetAndReset(WZ.ReadInt + FFileEntry.Offset);
         //  else Showmessage('Unknown iMarker: ' + IntToStr(iMarker));
         end;
       end;
    9: begin
         Entry.DataType := mdtExtended;
         EndOfExtBlock := WZ.ReadInt;
         EndOfExtBlock := EndOfExtBlock + WZ.Position;
         parseExtended(Entry, EndOfExtBlock);
       end;
    else Showmessage('Unknown Marker: ' + IntToStr(Marker));
  end;
end;

procedure TWZIMGFile.ParseExtended(var Entry: TWZIMGEntry; EndOfExtendedBlock: Cardinal);
var
  Marker: Byte;
  dType: string;
  Children, i: Integer;
  ChildEntry: TWZIMGEntry;
  Width, Height, Format, Format2, DataLength, X, Y: Integer;
begin
  Marker := WZ.ReadByte;

  case Marker of
    $73: dType := WZ.ReadDecodedString;
    $1B: dType := WZ.ReadDecodedStringAtOffsetAndReset(FFileEntry.Offset + WZ.ReadInt);
  end;

  if dType = 'Property' then
  begin
    Entry.DataType := mdtProperty;

    WZ.ReadByte;
    WZ.ReadByte;
    Children := WZ.ReadValue;

    for i := 0 to Children - 1 do
    begin
      ChildEntry := TWZIMGEntry.Create(Entry);
      Parse(ChildEntry);
      ChildEntry.Finish;
      Entry.AddChild(ChildEntry);
    end;
  end
  else
  if dType = 'Canvas' then
  begin
    Entry.DataType := mdtCanvas;
    WZ.ReadByte;   // always 0 (?)

    Marker := WZ.ReadByte;
    if Marker = 1 then
    begin
      WZ.ReadByte;
      WZ.ReadByte;

      Children := WZ.ReadValue;

      for i := 0 to Children - 1 do
      begin
        ChildEntry := TWZIMGEntry.Create(Entry);
        Parse(ChildEntry);
        ChildEntry.Finish;
        Entry.AddChild(ChildEntry);
      end;
    end;

    Width := WZ.ReadValue;
    Height := WZ.ReadValue;
    Format := WZ.ReadValue;
    Format2 := WZ.ReadByte;
    WZ.ReadInt;    // always 0 (?)
    DataLength := WZ.ReadInt - 1;
    WZ.ReadByte;   // always 0 (?)

    Entry.Canvas := TPNGMapleCanvas.Create(Width, Height, DataLength, WZ.Position, Format + Format2, WZ);
    WZ.Seek(DataLength, soCurrent);    // Skip the image
  end
  else
  if dType = 'Shape2D#Vector2D' then
  begin
    Entry.DataType := mdtVector;
    X := WZ.ReadValue;
    Y := WZ.ReadValue;
    Entry.Vector := Point(X, Y);
  end
  else
  if dType = 'Shape2D#Convex2D' then
  begin
    Children := WZ.ReadValue;

    for i := 0 to Children - 1 do
    begin
      ChildEntry := TWZIMGEntry.Create(Entry);
      ParseExtended(ChildEntry, 0);
      ChildEntry.Finish;
      Entry.AddChild(ChildEntry);
    end;
  end
  else
  if dType = 'Sound_DX8' then
  begin
    Entry.DataType := mdtSound;
    WZ.ReadByte;
    DataLength := WZ.ReadValue;
    WZ.ReadValue;  // no clue what this is

    Entry.Sound := TMP3MapleSound.Create(DataLength, WZ.Position, WZ);
    WZ.Seek(EndOfExtendedBlock, soBeginning);
  end
  else
  if dType = 'UOL' then
  begin
    Entry.DataType := mdtUOL;
    WZ.ReadByte;

    Marker := WZ.ReadByte;
    case Marker of
      0: Entry.Data := WZ.ReadDecodedString;
      1: Entry.Data := WZ.ReadDecodedStringAtOffsetAndReset(FFileEntry.Offset + WZ.ReadInt);
    end;
  end;
end;

end.
